openapi: 3.0.0
info:
  title: Marketplace API for VK
  version: 1.1.1
  description: |
    REST API для маркетплейса

servers:
  - url: http://kisel76.ru:8080

security:
  - bearerAuth: []

paths:
  /register:
    post:
      summary: Регистрация пользователя
      requestBody:
        description: Данные для регистрации
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Неверный JSON или невалидные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                error_description: "Ошибка: слишком длинный/короткий пароль/логин"
        '405':
          description: Метод не разрешён (только POST)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 405
                error_description: "Ошибка: поддерживается только метод Post для регистрации"
        '409':
          description: Логин уже занят
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 409
                error_description: "Ошибка: логин уже занят"
        '500':
          description: Ошибка сервера / базы данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                hash_error:
                  value:
                    code: 500
                    error_description: "Ошибка: ошибка при хэшровании пароля"
                db_error:
                  value:
                    code: 500
                    error_description: "Ошибка базы данных на стороне сервера"

  /login:
    post:
      summary: Авторизация пользователя
      requestBody:
        description: Данные для входа
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Неверный JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                error_description: "Ошибка: невалидный JSON"
        '401':
          description: "Ошибка: неверный логин или пароль / неавторизован"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                no_user:
                  value:
                    code: 401
                    error_description: "Ошибка: неверный логин или пароль"
                bad_pass:
                  value:
                    code: 401
                    error_description: "Ошибка: неверный логин или пароль"
        '405':
          description: Метод не разрешён (только POST)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 405
                error_description: "Ошибка: поддерживается только метод Post для регистрации"
        '500':
          description: Ошибка сервера / генерации токена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                db_error:
                  value:
                    code: 500
                    error_description: "Ошибка базы данных на стороне сервера"
                token_error:
                  value:
                    code: 500
                    error_description: "Ошибка генерации токена"

  /goods/add:
    post:
      summary: Создание объявления
      security:
        - bearerAuth: []
      requestBody:
        description: Данные объявления
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodsRequest'
      responses:
        '201':
          description: Объявление успешно создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodsResponse'
        '400':
          description: Неверный JSON или параметры
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                bad_json:
                  value:
                    code: 400
                    error_description: "Ошибка: невалидный JSON"
        '401':
          description: Неавторизованный пользователь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                error_description: "Ошибка: неавторизированный пользователь"
        '405':
          description: Метод не разрешён (только POST)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 405
                error_description: "Ошибка: поддерживается только метод Post для создания объявления"
        '500':
          description: Ошибка при создании объявления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                error_description: "Ошибка при создании объявления"
  
  /goods:
    get:
      summary: Получение списка объявлений
      description: |
        Поддерживается фильтрация по цене, сортировка, полнотекстовый поиск и пагинация.
        Если пользователь авторизован (JWT), возвращается поле `is_owner`.
      parameters:
        - name: page
          in: query
          description: Номер страницы (>=1)
          schema:
            type: integer
            default: 1
        - name: sort
          in: query
          description: Поле сортировки
          schema:
            type: string
            enum: [price, created_at]
            default: created_at
        - name: order
          in: query
          description: Направление сортировки
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: min_price
          in: query
          description: Минимальная цена (>=0)
          schema:
            type: number
            minimum: 0
        - name: max_price
          in: query
          description: Максимальная цена (>=0)
          schema:
            type: number
            minimum: 0
        - name: query
          in: query
          description: Поисковая фраза (в title или description)
          schema:
            type: string
      security:
        - bearerAuth: []   # необязательно, но если есть токен, добавляется флаг is_owner
      responses:
        '200':
          description: Список объявлений
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GoodsListResponse'
                  - $ref: '#/components/schemas/GoodsPublicListResponse'
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                bad_sort:
                  value:
                    code: 400
                    error_description: "Неверное поле сортировки"
                bad_order:
                  value:
                    code: 400
                    error_description: "Параметр 'order' может быть 'asc' или 'desc'"
                price_parse:
                  value:
                    code: 400
                    error_description: "min_price должен быть положительным числом"
                price_range:
                  value:
                    code: 400
                    error_description: "min_price не может быть больше max_price"
        '500':
          description: Ошибка сервера / БД
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                error_description: "Ошибка при выполнении запроса к БД"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      properties:
        login:
          type: string
          minLength: 3
          maxLength: 32
        password:
          type: string
          minLength: 8
          maxLength: 64
      required:
        - login
        - password
    
    RegisterResponse:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
      required:
        - id
        - login
        
    LoginRequest:
      type: object
      properties:
        login:
          type: string
          minLength: 3
          maxLength: 32
        password:
          type: string
          minLength: 8
          maxLength: 64
      required:
        - login
        - password

    GoodsRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 100
        description:
          type: string
          maxLength: 500
        image_url:
          type: string
          format: uri
        price:
          type: number
          minimum: 0
      required:
        - title
        - price

    GoodsResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        image_url:
          type: string
          format: uri
        price:
          type: number
        author_login:
          type: string
        is_owner:
          type: boolean
      required:
        - id
        - title
        - price
        - author_login
        - is_owner

    GoodsPublicResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        image_url:
          type: string
          format: uri
        price:
          type: number
        author_login:
          type: string
      required:
        - id
        - title
        - price
        - author_login

    GoodsListResponse:
      type: object
      properties:
        goods:
          type: array
          items:
            $ref: '#/components/schemas/GoodsResponse'
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_page:
          type: integer
      required:
        - goods
        - page
        - limit
        - total
        - total_page

    GoodsPublicListResponse:
      type: object
      properties:
        goods:
          type: array
          items:
            $ref: '#/components/schemas/GoodsPublicResponse'
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_page:
          type: integer
      required:
        - goods
        - page
        - limit
        - total
        - total_page

    AuthResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token

    MessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        error_description:
          type: string
      required:
        - code
        - error_description